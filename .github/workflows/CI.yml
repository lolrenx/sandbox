---
# MegaLinter GitHub Action configuration file
# More info at https://megalinter.github.io
name: CI

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    # branches-ignore:
      # - PRODUCTION
      # more infos on possible types here : https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#pull_request
env:
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  megalinter:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.github.io/flavors/
        uses: megalinter/megalinter/flavors/python@v5
        env:
          # All available variables are described in documentation
          # https://megalinter.github.io/configuration/
          # Apply linter fixes configuration
          VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          #DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks
          DISABLE_LINTERS: cspell

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            report
            mega-linter.log

      # Push new commit if applicable (for now works only on PR from same repository, not from forks)
      - name: Prepare commit
        # TO DO review if clauses
        if: |
            steps.ml.outputs.has_updated_sources == 1
            && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name)
            && env.APPLY_FIXES_MODE == 'commit'
            && github.ref != 'refs/heads/main'
            && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
            && !contains(github.event.head_commit.message, 'skip fix')
        run: sudo chown -Rc $UID .git/
      - name: Commit and push applied linter fixes
        if: |
            steps.ml.outputs.has_updated_sources == 1
            && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name)
            && env.APPLY_FIXES_MODE == 'commit'
            && github.ref != 'refs/heads/main'
            && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
            && !contains(github.event.head_commit.message, 'skip fix')
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "[MegaLinter] Apply linters fixes"

  # test:
  #   needs: megalinter
  #   name: UnitTest
  #   runs-on: ubuntu-latest
  #   env:
  #     DB_USER: root
  #     DB_PASSWORD: root
  #     NAME: test_db_github_action
  #     SECRET_KEY: ${{ secrets.SECRET_KEY }}
  #     # warning this is the dev db
  #     DATABASE_URL: ${{ secrets.DEV_DB_URL }}
  #     GMAIL_API_CLIENT_ID: ${{ secrets.GMAIL_API_CLIENT_ID }}
  #     GMAIL_API_CLIENT_SECRET: ${{ secrets.GMAIL_API_CLIENT_SECRET }}
  #     GMAIL_API_REFRESH_TOKEN: ${{ secrets.GMAIL_API_REFRESH_TOKEN }}

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up MySQL
  #       run: |
  #         sudo /etc/init.d/mysql start
  #         mysql -e 'CREATE DATABASE ${{ env.NAME }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
  #     - name: Set up python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.9"
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
  #     - name: run tests
  #       run: pytest --cov
